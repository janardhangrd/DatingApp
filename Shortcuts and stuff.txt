settings.json to hide file that showup in project solution browser.
2019-10-20 2.5 - 2.
	code 1st approach:
		Tell EF about our Class(Model) 
			=> mention it in Constructor of DataContext Class and pass it to base(DbContext) class contructor

		Tell our App about this
			=> Startup.cs :: 


Module 4:
1) copy jumbotron navbar from bootstrap site and create new component and paste navHTML into our components html
2) 
	rightClick on app folder(left side of VSCode :: Explorer window) create Component: nav 
	2.0) Template Reference Variable : # symbol
	2.1) ng-Model helps achieve 2 way binding ::  [(ngModel)]="model.username" 
 	2.3) ngSubmit :: (ngSubmit)="login()">
	2.4) html elements:: valid, touched, dirty
	2.5)  <button [disabled]="!loginForm.valid" 

3) Services:
	Provide code reusability and maintainability
	#Components are automatically Injectable, but Services are not.
	Add this service ref to app.module.ts ::
		in Providers section: AuthServie ==> automatically added:: import { AuthService } from './_services/auth.service';
	==> now our service is available to be injectable into our components.
	rxjs are used to handle responses using observables , etc......
	

Section 4: Angular Services, ngIf & below......
4) Send Data from parent to child.
	
	4.1) parent(home) should have "values". 
	4.2) parent(home) html:  <app-register [valuesFromHome]="values"> </app-register>
		4.2.0) input property in [] brackets :: [valuesFromHome]
		4.2.1) output property in () brackets :: (cancelRegister)
	4.3) child(register) ts:   @Input() valuesFromHome: any;
	4.4) verify if values have reached child: <select name="favoriteValue" id="favoriteValue" class="form-control">
        <option *ngFor="let item of valuesFromHome" [value]="item"> {{item.name}} </option>
      </select>
5) Send Data from child to parent.
	5.0) child:     @Output() cancelRegister = new EventEmitter();
	5.1) child:	this.cancelRegister.emit(false); //false can be anything object etc......
	5.2) parent:  <app-register [valuesFromHome]="values" ((cancelRegister)="cancelRegisterMode($event)")> </app-register>
		5.2.0) input property in [] brackets :: [valuesFromHome]
		5.2.1) output property in () brackets :: (cancelRegister)
	5.3) parent:  cancelRegisterMode(registerMode: boolean) {
    			this.registerMode = registerMode;
  		     }


Section 5: Error Handling
	5.0) 
	5.1) Try catch to handle errors
	5.2) Global Error Handling in .net Core 3.0
		5.2.0) 


Section 6: Adding 3rd party components
	6.1:: Alertifyjs:: toast msg's :: npm install alterfityjs
	6.2:: Angular JWT:: improve our "token" security by validating it.
	NGX bootstrap:: 
	Bootswatch:: theme

